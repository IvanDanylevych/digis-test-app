{"version":3,"sources":["store/actions/actionTypes.js","utils/index.js","store/reducers/city.js","components/input/index.jsx","components/chart/index.jsx","components/button/index.jsx","container/Main/Main.jsx","store/selectors/weatherSelector.js","store/selectors/errorSelector.js","api/index.js","store/actions/city.js","container/Main/index.js","index.js","container/Main/Main.module.scss"],"names":["FETCH_CITY_START","FETCH_CITY_SUCCESSFUL","FETCH_CITY_ERROR","formatTemperature","temp","Math","floor","formatDate","date","moment","unix","format","enumErrorTypes","400","404","updateObject","oldObject","updatedProperties","initialState","city","loading","error","fetchStart","state","action","fetchSuccessful","payload","fetchError","reducer","type","actionTypes","Input","onChange","placeholder","e","target","value","CustomTooltip","active","label","length","avg","min","max","Chart","data","BarChart","layout","width","height","CartesianGrid","strokeDasharray","YAxis","dataKey","fontSize","tickFormatter","tick","XAxis","Tooltip","position","y","x","content","Legend","Bar","name","fill","Button","onClick","text","Main","onFetchCity","weatherList","useState","inputValue","setInputValue","className","styles","mainWrapper","inputWrapper","errorMessage","map","i","dt","main","temp_min","temp_max","weatherSelector","list","errorSelector","cod","base_url","API_key","fetchCity","cityName","dispatch","actionsTypes","city_name","axios","get","getCity","then","res","cities","catch","fetchCityFail","response","connect","rootReducer","combineReducers","cityReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.6574d633.chunk.js","sourcesContent":["export const FETCH_CITY_START = 'FETCH_CITIES_START';\nexport const FETCH_CITY_SUCCESSFUL = 'FETCH_CITIES_SUCCESSFUL';\nexport const FETCH_CITY_ERROR = 'FETCH_CITIES_ERROR';\n","import moment from 'moment';\n\nexport const formatTemperature = temp => Math.floor(temp - 273);\n\nexport const formatDate = date => moment.unix(date).format('YYYY-MM-DD, HH:MM');\n\nexport const formatDataForChart = data =>\n  data.map(i => ({\n    date: i.dt,\n    min: formatTemperature(i.main.temp_min),\n    max: formatTemperature(i.main.temp_max),\n    avg: formatTemperature(i.main.temp),\n  }));\n\nexport const enumErrorTypes = {\n  400: 'Please type your city name',\n  404: 'Please try another city',\n};\n\nexport const updateObject = (oldObject, updatedProperties) => {\n  return {\n    ...oldObject,\n    ...updatedProperties,\n  };\n};\n","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../../utils';\n\nconst initialState = {\n  city: {},\n  loading: false,\n  error: null,\n};\n\nconst fetchStart = (state, action) => {\n  return updateObject(state, { loading: true });\n};\n\nconst fetchSuccessful = (state, action) => {\n  return updateObject(state, { city: action.payload, loading: false, error: null });\n};\n\nconst fetchError = (state, action) => {\n  return updateObject(state, { error: action.payload, loading: false, city: {} });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_CITY_START:\n      return fetchStart(state, action);\n    case actionTypes.FETCH_CITY_SUCCESSFUL:\n      return fetchSuccessful(state, action);\n    case actionTypes.FETCH_CITY_ERROR:\n      return fetchError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\n\nexport const Input = ({ onChange }) => (\n  <input placeholder=\"Please type your city\" onChange={e => onChange(e.target.value)} />\n);\n","import React from 'react';\n\nimport { formatDate } from '../../utils';\nimport { BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Bar } from 'recharts';\n\nconst CustomTooltip = ({ active, payload, label }) => {\n  if (active && payload && payload.length) {\n    return (\n      <div>\n        <p>date: {formatDate(label)}</p>\n        <p>temperature: {payload[0].payload.avg}℃</p>\n        <p>min-max: {`${payload[0].payload.min}-${payload[0].payload.max}℃`}</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport const Chart = ({ data }) => (\n  <BarChart layout={'vertical'} width={600} height={1000} data={data}>\n    <CartesianGrid strokeDasharray=\"5 5\" />\n    <YAxis type=\"category\" dataKey=\"date\" fontSize=\"10\" tickFormatter={tick => formatDate(tick)} />\n    <XAxis type=\"number\" />\n    <Tooltip position={{ y: 80, x: 600 }} content={<CustomTooltip />} />\n    <Legend />\n    <Bar name=\"temperature ℃\" dataKey=\"avg\" fill=\"#8884d8\" />\n  </BarChart>\n);\n","import React from 'react';\n\nexport const Button = ({ onClick = () => {}, text = '' }) => <button onClick={onClick}>{text}</button>;\n","import React, { useState } from 'react';\n\nimport styles from './Main.module.scss';\n\nimport { Chart, Button, Input } from '../../components';\nimport { formatDataForChart, enumErrorTypes } from '../../utils';\n\nconst Main = ({ onFetchCity, weatherList, error }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const searchButtonHandler = () => {\n    onFetchCity(inputValue);\n  };\n\n  return (\n    <div className={styles.mainWrapper}>\n      <div className={styles.inputWrapper}>\n        <Input onChange={setInputValue} />\n        <Button onClick={searchButtonHandler} text=\"Search\" />\n      </div>\n      {error && <div className={styles.errorMessage}>{enumErrorTypes[error]}</div>}\n      {weatherList && <Chart data={formatDataForChart(weatherList)} />}\n    </div>\n  );\n};\n\nexport default Main;\n","export const weatherSelector = state => state.city?.city?.list;\n","export const errorSelector = state => state.city.error?.cod;\n","import axios from 'axios';\n\nconst base_url = 'https://api.openweathermap.org/data/2.5/forecast';\nconst API_key = 'bad46dfee1ae1125ec4faf31e63449de';\n\nexport const getCity = (city_name = '') => axios.get(`${base_url}?q=${city_name}&appid=${API_key}`);\n","import * as actionsTypes from './actionTypes';\n\nimport { getCity } from '../../api';\n\nexport const fetchCityStart = () => {\n  return {\n    type: actionsTypes.FETCH_CITY_START,\n  };\n};\n\nexport const fetchCitySuccess = cities => {\n  return {\n    type: actionsTypes.FETCH_CITY_SUCCESSFUL,\n    payload: cities,\n  };\n};\n\nexport const fetchCityFail = error => {\n  return {\n    type: actionsTypes.FETCH_CITY_ERROR,\n    payload: error,\n  };\n};\n\nexport const fetchCity = cityName => {\n  return dispatch => {\n    dispatch(fetchCityStart());\n    getCity(cityName)\n      .then(res => {\n        dispatch(fetchCitySuccess(res.data));\n      })\n      .catch(error => {\n        dispatch(fetchCityFail(error.response.data));\n      });\n  };\n};\n","import Main from './Main';\nimport { connect } from 'react-redux';\nimport { weatherSelector, errorSelector } from '../../store/selectors';\nimport { fetchCity } from '../../store/actions/city';\n\nconst mapStateToProps = state => {\n  return {\n    weatherList: weatherSelector(state),\n    error: errorSelector(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchCity: cityName => dispatch(fetchCity(cityName)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport cityReducer from '../src/store/reducers/city';\nimport Main from '../src/container/Main';\nimport './index.scss';\n\nconst rootReducer = combineReducers({\n  city: cityReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <Main />\n  </Provider>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapper\":\"Main_mainWrapper__1CSF0\",\"inputWrapper\":\"Main_inputWrapper__3XaM5\",\"errorMessage\":\"Main_errorMessage__3s4xF\"};"],"sourceRoot":""}